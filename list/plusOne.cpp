/**
 * 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

 

示例 1：

输入：digits = [1,2,3]
输出：[1,2,4]
解释：输入数组表示数字 123。
示例 2：

输入：digits = [4,3,2,1]
输出：[4,3,2,2]
解释：输入数组表示数字 4321。
示例 3：

输入：digits = [9]
输出：[1,0]
解释：输入数组表示数字 9。
加 1 得到了 9 + 1 = 10。
因此，结果应该是 [1,0]。
 */

#include "listCount.h"

/**
 * 思路：
 * 本体考察的主要点在于如果全部元素都是9
 * 那么要不停的进 1 
 * 但是在数组元素上只能有一个数字，到最后需要多加一个元素
 * 所以要把0下标位置的元素为9的这个情况单独列出来
 * 
 */

vector<int> plusOne(vector<int>& digits) {
    for (int i = digits.size(); i > 0; i--)
    {
        // 元素都为9的情况，都为9接着循环
        if(digits[i-1] == 9 && i != 1){
            digits[i-1] = (digits[i-1] + 1) % 10;
        }else if(i == 1 && digits[i-1] == 9){
            // 头元素为9需要增加一个元素。
            digits.push_back(0);
            digits[i-1] = 1;
        }else{
            //元素不为9的情况， 直接返回
            digits[i-1] += 1;
            return digits;
        }
    }
    return digits;
}